openapi: 3.0.3
info:
  title: Songify - OpenAPI 3.0
  version: 0.0.1
  description: This is an API that allows you to do CRUD operations on artists, releases and recordings. 
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://localhost/api/v1
externalDocs:
  description: Find out more about Songify
  url: https://github.com/rmerchanc/songify
tags:
  - name: artist
    description: Everything about artists
    externalDocs:
      description: Find out more about artists
      url: https://musicbrainz.org/doc/Artist
  - name: release
    description: Everything about releases
    externalDocs:
      description: Find out more about releases
      url: https://musicbrainz.org/doc/Release
  - name: recording
    description: Everything about recordings
    externalDocs:
      description: Find out more about recordings
      url: https://musicbrainz.org/doc/Recording
paths:
  /artist:
    get: 
      tags: 
        - artist
      summary: GET all the artists of the API
      description: Retreives all the information of the available artists
      responses: 
        '200': 
          description: All the information of the artists was successfully retreived
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/artists"
        '404':
          description: There is no artist with that gender
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags: 
        - artist
      summary: POST a new artist 
      description: Creates a new artist based on the information provided by the user
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/artist"
      responses: 
        '201': 
          description: Created a new artist successfully based on the information provided
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/new_element"
        '400':
          description: Bad request performed by the client due to invalid parameters
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /artist/{id}:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - artist
      summary: GET one artist of the API
      description: Retreives all the information of the specified artist
      responses: 
        '200': 
          description: All the information of the specified artist was successfully retreived
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/artist"
        '404':
          description: There is no artist with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags: 
        - artist
      summary: PUT one artist of the API
      description: Updates all or part of the information of the specified artist
      requestBody:
        required: true
        content: 
          application/json:
              schema: 
                $ref: "#/components/schemas/artist_update"
      responses: 
        '200': 
          description: All the information provided was successfully updated for the specified artist
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/new_element"
        '400':
          description: Bad request performed by the client due to invalid parameters
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: There is no artist with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags: 
        - artist
      summary: DELETE one artist of the API
      description: Deletes all the information of the specified artist
      responses: 
        '200': 
          description: All the information provided was successfully deleted for the artist
        '404':
          description: There is no artist with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'    
  /artist/{id}/release:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - release
      summary: GET all the releases from a specific artist of the API
      description: Retreives all the information of the available releases from an artist
      responses: 
        '200': 
          description: All the information of the releases from the specified artist was successfully retreived
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/releases"
        '404':
          description: There is no artist with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error" 
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags: 
        - release
      summary: POST a new release from an artist 
      description: Creates a new release from an artist based on the information provided by the user
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/release"
      responses: 
        '201': 
          description: Created a new release successfully based on the information provided
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/new_element"
        '400':
          description: Bad request performed by the client due to invalid parameters
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: There is no artist with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /artist/{id}/release/{id}:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - release
      summary: GET one artist's release of the API
      description: Retreives all the information of the specified artist's release
      responses: 
        '200': 
          description: All the information of the specified artist's release was successfully retreived
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/release"
        '404':
          description: There is no artist / release with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags: 
        - release
      summary: PUT one artist's release of the API
      description: Updates all or part of the information of the specified artist's release
      requestBody:
        required: true
        content: 
          application/json:
              schema: 
                $ref: "#/components/schemas/release_update"
      responses: 
        '200': 
          description: All the information provided was successfully updated for the specified artist's release
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/new_element"
        '400':
          description: Bad request performed by the client due to invalid parameters
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: There is no artist / release with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags: 
        - release
      summary: DELETE one release from an artist of the API
      description: Deletes all the information of the specified release of the artist
      responses: 
        '200': 
          description: All the information provided was successfully deleted for the artist's release
        '404':
          description: There is no artist / release with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /artist/{id}/recording:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - recording
      summary: GET all the recordings of one artist of the API 
      description: Retreives all the information of the available recordings of an artist
      responses:
        "200":
          description: All the information of the recordings was successfully retreived
          content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/recordings'
        '404':
          description: There is no artist with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"    
  /artist/{id}/recording/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - recording
      summary: GET a recording from a specific artist of the API
      description: Retreives all the information of one recording from an artist
      responses:
        "200":
          description: All the information of a recording from the specified artist was successfully retreived
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/recording'
        '404':
          description: There is no artist / recording with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /artist/{id}/release/{id}/recording:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - recording
      summary: GET all the recordings of one release of an artist of the API 
      description: Retreives all the information of the available recordings of an artist's release
      responses:
        "200":
          description: All the information of the recordings was successfully retreived
          content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/recordings'
        '404':
          description: There is no artist / release with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /artist/{id}/release/{id}/recording/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - recording
      summary: GET a recording from a specific artist's release of the API
      description: Retreives all the information of one recording from an artist's release
      responses:
        "200":
          description: All the information of a recording from the specified artist's release was successfully retreived
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/recording'
        '404':
          description: There is no artist / release / recording with that identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  parameters: 
    id: 
      description: Unique identifier for a resource
      name: id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/id"
  schemas: 
    id: 
      type: string
      example: "6453d52160ce38b9336a3599"
    artists: 
      type: array
      items: 
        $ref: "#/components/schemas/artist"
      example: [ # Modificar ejemplos: hace fata poner el id del mongo, y también referenciar el id del mongo en 'url_release'
        {
        "id": "e1d521ea-5b97-4981-987c-ba988b2a87d7",
        "type": "Person",
        "name": "Erik Satie",
        "gender": "male",
        "area": "France",
        "begin": "1866-05-17",
        "end": "1925-07-01",
        "url_release": "https://localhost/api/v1/artist/1/release"
        }, 
        {
        "id": "e928d534-ce5b-436f-9186-598f9e7baa1f",
        "type": "Person",
        "name": "Heino",
        "gender": "male",
        "area": "Germany",
        "begin": "1938-12-13"
        "url_release": "https://localhost/api/v1/artist/2/release"
        }
      ]
    artist_update:
      type: object
      properties: 
        id: 
          $ref: "#/components/schemas/id"  
        name: 
          type: string
          description: Official name of the artist, it could be a person or a band
        type: 
          type: string
          enum: ["Person", "Group", "Orchestra", "Choir"]
          description: Type which indicates whether an artist is a person, a group or something else.
        gender: 
          type: string
          enum: ["Male", "Female", "Neither"]
          description: Gender states whether a person or character identifies as a male, female or neither. Groups do not have genders. 
        area: 
          type: string
          description: Area with which an artist is identified with. Mostly, it is birth/formation country. 
        begin_date: 
          type: string
          format: date
          description: Begin date represents the date of birth or the group formation
        end_date: 
          type: string
          format: date
          description: End date represents the date of death or the group last dissolution
        url_release: 
          type: string
          format: uri
          description: URI to the releases of this artist
        url_recording: 
          type: string
          format: uri
          description: URI to the recordings of this artist
      additionalProperties: false
      example: {
        "type": "Choir"
      }
    artist:
      allOf:
        - required: 
          - id
          - name
          - type
          - area
          - begin_date
          - url_release
          - url_recording
        - $ref: "#/components/schemas/artist_update"
      example: {
        "id": 1,
        "name": "Coldplay",
        "type": "Group",
        "area": "United Kingdom",
        "begin_date": "1996-09",
        "url_release": "https://localhost/api/v3/artist/1/release",
        "url_recording": "https://localhost/api/v3/artist/1/recording"
      }
    releases:
      type: array
      items: 
        $ref: "#/components/schemas/release"
      example: [ # no tiene url, falta id de mongo
        {
        "id": "03082446-54ca-4f5f-a0a8-a19fa918be9b",
        "title": "Harry Potter ja liekehtivä pikari",
        "date": "2013",
        "country": "FI",
        "language": "fin",
        "id_artist": "569c0d90-28dd-413b-83e4-aaa7c27e667b"
        },
        {
        "id": "0519cffb-7dd8-4460-8e72-aeb8490184af",
        "title": "Harry Potter ja salaisuuksien kammio",
        "date": "2013",
        "country": "FI",
        "language": "fin",
        "id_artist": "569c0d90-28dd-413b-83e4-aaa7c27e667b"
        }
      ] 
    release_update:
      type: object
      properties: 
        id: 
          $ref: "#/components/schemas/id" 
        title: 
          type: string
          description: Official name of the release
        date: 
          type: string
          format: date
          description: Official date of the artist's release 
        country: 
          type: string
          description: Country of the artist's release. Mostly, it is birth/formation country. 
        language: 
          type: string
          description: Official language of the artist's release
        id_artist:
          $ref: "#/components/schemas/id_artist"
        url_recording: 
          type: string
          format: uri
          description: URI to the recordings of this release
      example: {
        "date": "2000-08-10"
      }
    release:
      allOf:
        - required:
          - id
          - title
          - date
          - country
          - language
          - id_artist
          - url_recording
        - $ref: "#/components/schemas/release_update"
      additionalProperties: false
      example:
        {
        "id": "03082446-54ca-4f5f-a0a8-a19fa918be9b",
        "title": "Harry Potter ja liekehtivä pikari",
        "date": "2013",
        "country": "FI",
        "language": "fin",
        "id_artist": "569c0d90-28dd-413b-83e4-aaa7c27e667b"
        }
  
    recordings:
      type: array 
      items:
        $ref: "#/components/schemas/recording"
      example: [    {
        "id_recordig": "3b8dd486-cb51-4c9b-9c83-9d6e4f25144a",
        "title": "'til Kingdom Come",
        "length": "4:24"
      },
      {
        "id_recordig": "eb4a55da-cfa9-4211-ad14-e1419e1ccb18",
        "title": "'til Kingdom Come",
        "length": "5:24"
      }]             
    recording:
      - required:
        - id
        - title
        - length
      example: {
      "id": "4385f49f-46b4-42c3-a0a0-054f2b426880",
      "title": "(Chris chat #2)",
      "length": "2:3"
      }
    new_element: # ejemplo mal el id
      type: object
      properties:
        id:
          $ref: "#/components/schemas/id"
        url: 
          description: Link to the new element created
          type: string
          format: uri
      example: {
        "id": 1,
        "url": "https://localhost/api/v1/artist/1"
      }
    error:
      type: object
      properties:
        error:
          type: string
          enum: ["Bad request", "Not Found", "Internal Server Error"]
        mensaje: 
          type: string
          enum: ["Bad request performed by the client due to invalid parameters", 
                 "The specified resource was not found", 
                 "The server encountered an unexpected condition that prevented it from fulfilling the request"]
      required:
      - error
      - mensaje
      additionalProperties: false
      example: {
        "error": "Bad request",
        "mensaje": "Bad request performed by the client due to invalid parameters"
      }
    