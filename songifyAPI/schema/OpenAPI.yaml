openapi: 3.0.3
info:
  title: Songify - OpenAPI 3.0
  version: 0.0.1
  description: This is an API that allows you to do CRUD operations on artists and releases, plus sending requests to Music Brainz for recordings. 
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://localhost/api/v1
externalDocs:
  description: Find out more about Songify
  url: https://github.com/rmerchanc/songify
tags:
  - name: artist
    description: Everything about artists
    externalDocs:
      description: Find out more about artists
      url: https://musicbrainz.org/doc/Artist
  - name: release
    description: Everything about releases
    externalDocs:
      description: Find out more about releases
      url: https://musicbrainz.org/doc/Release
  - name: recording
    description: Everything about recordings
    externalDocs:
      description: Find out more about recordings
      url: https://musicbrainz.org/doc/Recording
paths:
  /artist:
    get: 
      tags: 
        - artist
      parameters: 
      - $ref: "#/components/parameters/limit"
      - $ref: "#/components/parameters/next"
      - $ref: "#/components/parameters/gender"
      summary: GET all the artists of the API
      description: Retreives all the information of the available artists
      responses: 
        '200': 
          description: All the information of the artists was successfully retreived
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/artists"
        '404':
          description: There are no artists with that gender / next parameter
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags: 
        - artist
      summary: POST a new artist 
      description: Creates a new artist based on the information provided by the user
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/artist"
      responses: 
        '201': 
          description: Created a new artist successfully based on the information provided
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/new_element"
        '400':
          description: Bad request performed by the client due to invalid parameters
          content: 
            text/html:
              schema:
                $ref: '#/components/schemas/error'
  /artist/{id}:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - artist
      summary: GET one artist of the API
      description: Retreives all the information of the specified artist
      responses: 
        '200': 
          description: All the information of the specified artist was successfully retreived
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/artist"
        '404':
          description: There is no artist with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
    put:
      tags: 
        - artist
      summary: PUT one artist of the API
      description: Updates all or part of the information of the specified artist
      requestBody:
        required: true
        content: 
          application/json:
              schema: 
                $ref: "#/components/schemas/artist_update"
      responses: 
        '200': 
          description: All the information provided was successfully updated for the specified artist
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/new_element"
        '400':
          description: Bad request performed by the client due to invalid parameters
          content: 
            text/html:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: There is no artist with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags: 
        - artist
      summary: DELETE one artist of the API and all their releases
      description: Deletes all the information of the specified artist
      responses: 
        '200': 
          description: All the information provided was successfully deleted for the artist
        '404':
          description: There is no artist with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"  
  /artist/{id}/release:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - release
      parameters: 
      - $ref: "#/components/parameters/limit"
      - $ref: "#/components/parameters/next"
      summary: GET all the releases from a specific artist of the API
      description: Retreives all the information of the available releases from an artist
      responses: 
        '200': 
          description: All the information of the releases from the specified artist was successfully retreived
          content:
            application/xml:
              schema: 
                $ref: "#/components/schemas/releases"
        '404':
          description: There is no artist with that identifier (including next parameter)
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error" 
    post:
      tags: 
        - release
      summary: POST a new release from an artist 
      description: Creates a new release from an artist based on the information provided by the user
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/release"
      responses: 
        '201': 
          description: Created a new release successfully based on the information provided
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/new_element"
        '400':
          description: Bad request performed by the client due to invalid parameters
          content: 
            text/html:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: There is no artist with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
  /artist/{id}/release/{id}:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - release
      summary: GET one artist's release of the API
      description: Retreives all the information of the specified artist's release
      responses: 
        '200': 
          description: All the information of the specified artist's release was successfully retreived
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/release"
        '404':
          description: There is no artist / release with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
    put:
      tags: 
        - release
      summary: PUT one artist's release of the API
      description: Updates all or part of the information of the specified artist's release
      requestBody:
        required: true
        content: 
          application/json:
              schema: 
                $ref: "#/components/schemas/release_update"
      responses: 
        '200': 
          description: All the information provided was successfully updated for the specified artist's release
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/new_element"
        '400':
          description: Bad request performed by the client due to invalid parameters
          content: 
            text/html:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: There is no artist / release with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags: 
        - release
      summary: DELETE one release from an artist of the API
      description: Deletes all the information of the specified release of the artist
      responses: 
        '200': 
          description: All the information provided was successfully deleted for the artist's release
        '404':
          description: There is no artist / release with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
  /artist/{id}/recording:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - recording
      summary: GET all the recordings of one artist of the API 
      description: Retreives all the information of the available recordings of an artist
      responses:
        "200":
          description: All the information of the recordings was successfully retreived
          content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/recordings'
        '404':
          description: There is no artist with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"  
  /artist/{id}/recording/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - recording
      summary: GET a recording from a specific artist of the API
      description: Retreives all the information of one recording from an artist
      responses:
        "200":
          description: All the information of a recording from the specified artist was successfully retreived
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/recording'
        '404':
          description: There is no artist / recording with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
  /artist/{id}/release/{id}/recording:
    parameters: 
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - recording
      summary: GET all the recordings of one release of an artist of the API 
      description: Retreives all the information of the available recordings of an artist's release
      responses:
        "200":
          description: All the information of the recordings was successfully retreived
          content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/recordings'
        '404':
          description: There is no artist / release with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
  /artist/{id}/release/{id}/recording/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags: 
        - recording
      summary: GET a recording from a specific artist's release of the API
      description: Retreives all the information of one recording from an artist's release
      responses:
        "200":
          description: All the information of a recording from the specified artist's release was successfully retreived
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/recording'
        '404':
          description: There is no artist / release / recording with that identifier
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/error"
components:
  parameters: 
    id: 
      description: Unique identifier for a resource
      name: id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/id"
    limit: 
      description: Limit the number of results
      name: limit
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/limit"
    next: 
      description: ID of the next resource
      name: next
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/id"
    gender: 
      description: Filter using gender
      name: gender
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/gender"
  schemas: 
    id: 
      type: string
      example: "6453d52160ce38b9336a3599"
    artists: 
      type: array
      items: 
        $ref: "#/components/schemas/artist"
      example: [
        {
            "_id": "6453d4f8e6dba8365cac27c4",
            "id": "b972f589-fb0e-474e-b64a-803b0364fa75",
            "type": "Person",
            "name": "Wolfgang Amadeus Mozart",
            "gender": "male",
            "area": "Austria",
            "begin": "1756-01-27",
            "end": "1791-12-05",
            "url_release": "localhost:3000/api/v1/artist/6453d4f8e6dba8365cac27c4/release"
        },
        {
            "_id": "6453d4f8e6dba8365cac27c5",
            "id": "70248960-cb53-4ea4-943a-edb18f7d336f",
            "type": "Person",
            "name": "Bruce Springsteen",
            "gender": "male",
            "area": "United States",
            "begin": "1949-09-23",
            "url_release": "localhost:3000/api/v1/artist/6453d4f8e6dba8365cac27c5/release"
        },
        {
            "_id": "6453d4f8e6dba8365cac27c6",
            "id": "1f9df192-a621-4f54-8850-2c5373b7eac9",
            "type": "Person",
            "name": "Ludwig van Beethoven",
            "gender": "male",
            "area": "Germany",
            "begin": "1770-12-17",
            "end": "1827-03-26",
            "url_release": "localhost:3000/api/v1/artist/6453d4f8e6dba8365cac27c6/release"
        }
      ]
    artist_update:
      type: object
      properties: 
        type: 
          type: string
          enum: ["Person", "Group", "Orchestra", "Choir"]
          description: Type which indicates whether an artist is a person, a group or something else.
        name: 
          type: string
          description: Official name of the artist, it could be a person or a band
        gender: 
          type: string
          enum: ["male", "female"]
          description: Gender states whether a person or character identifies as a male or female. Groups do not have genders. 
        area: 
          type: string
          description: Area with which an artist is identified with. Mostly, it is birth/formation country. 
        begin: 
          type: string
          format: date
          description: Begin date represents the date of birth or the group formation
        end: 
          type: string
          format: date
          description: End date represents the date of death or the group last dissolution
      additionalProperties: false
      example: {
        "type": "Choir"
      }
    artist:
      type: object
      properties: 
        _id: 
          $ref: "#/components/schemas/id"
        id: 
          $ref: "#/components/schemas/id"
        type: 
          type: string
          enum: ["Person", "Group", "Orchestra", "Choir"]
          description: Type which indicates whether an artist is a person, a group or something else.
        name: 
          type: string
          description: Official name of the artist, it could be a person or a band
        gender: 
          type: string
          enum: ["male", "female"]
          description: Gender states whether a person or character identifies as a male or female. Groups do not have genders. 
        area: 
          type: string
          description: Area with which an artist is identified with. Mostly, it is birth/formation country. 
        begin: 
          type: string
          format: date
          description: Begin date represents the date of birth or the group formation
        end: 
          type: string
          format: date
          description: End date represents the date of death or the group last dissolution
        url_release: 
          type: string
          format: uri
          description: URI to the releases of this artist
      additionalProperties: false
      required: 
        - _id
        - id
        - name
        - type
        - gender
        - area
        - begin
        - url_release
      example: {
          "_id": "6453d4f8e6dba8365cac27c4",
          "id": "b972f589-fb0e-474e-b64a-803b0364fa75",
          "type": "Person",
          "name": "Wolfgang Amadeus Mozart",
          "gender": "male",
          "area": "Austria",
          "begin": "1756-01-27",
          "end": "1791-12-05",
          "url_release": "localhost:3000/api/v1/artist/6453d4f8e6dba8365cac27c4/release"
      }
    releases:
      type: array
      items: 
        $ref: "#/components/schemas/release"
      example: 
        <results>
          <result>
              <_id>6474f24bff8ecd2d7c987aa8</_id>
              <id>023a97e2-e101-433e-9a53-ca61a1fa3a7c</id>
              <title>Le nozze di Figaro</title>
              <date>1968</date>
              <country>DE</country>
              <language>eng</language>
              <id_artist>b972f589-fb0e-474e-b64a-803b0364fa75</id_artist>
          </result>
          <result>
              <_id>6474f24bff8ecd2d7c987aa9</_id>
              <id>03f1288f-0c04-414e-ad70-0e1c8f1af15a</id>
              <title>Horn Concertos 1-4</title>
              <date>1954-11</date>
              <country>GB</country>
              <language>eng</language>
              <id_artist>b972f589-fb0e-474e-b64a-803b0364fa75</id_artist>
          </result>
          <result>
              <_id>6474f24bff8ecd2d7c987aaa</_id>
              <id>04fbb752-162a-483b-b0f8-f7f67912af4e</id>
              <title>Serenade for Orchestra / Tropical / El rancho grande</title>
              <date>1945-04</date>
              <country>US</country>
              <language>eng</language>
              <id_artist>b972f589-fb0e-474e-b64a-803b0364fa75</id_artist>
          </result>
        </results>
    release_update:
      type: object
      properties: 
        title: 
          type: string
          description: Official name of the release
        date: 
          type: string
          format: date
          description: Official date of the artist's release 
        country: 
          type: string
          description: Country of the artist's release. Mostly, it is birth/formation country. 
        language: 
          type: string
          description: Official language of the artist's release
        id_artist:
          $ref: "#/components/schemas/id"
      additionalProperties: false
      example: {
        "date": "2000-08-10"
      }
    release:
      type: object
      properties: 
        _id: 
          $ref: "#/components/schemas/id"
        id: 
          $ref: "#/components/schemas/id"
        title: 
          type: string
          description: Official name of the release
        date: 
          type: string
          format: date
          description: Official date of the artist's release 
        country: 
          type: string
          description: Country of the artist's release. Mostly, it is birth/formation country. 
        language: 
          type: string
          description: Official language of the artist's release
        id_artist:
          $ref: "#/components/schemas/id"
      required:
        - _id
        - id
        - title
        - date
        - country
        - language
        - id_artist
      additionalProperties: false
      example: {
        "_id": "6474f24bff8ecd2d7c987aa8",
        "id": "023a97e2-e101-433e-9a53-ca61a1fa3a7c",
        "title": "Le nozze di Figaro",
        "date": "1968",
        "country": "DE",
        "language": "eng",
        "id_artist": "b972f589-fb0e-474e-b64a-803b0364fa75"
      }
    recordings:
      type: array 
      items:
        $ref: "#/components/schemas/recording"
      example: [
        {
          id_recordig: '88e6a14a-9ff4-4ba2-92be-c80601417a42',
          title: "'til Kingdom Come",
          length: '0:0'
        },
        {
          id_recordig: '3b8dd486-cb51-4c9b-9c83-9d6e4f25144a',
          title: "'til Kingdom Come",
          length: '4:24'
        }
      ]      
    recording:
      required:
        - id_recording
        - title
        - length
      additionalProperties: false
      example: {
        id_recordig: '3b8dd486-cb51-4c9b-9c83-9d6e4f25144a',
        title: "'til Kingdom Come",
        length: '4:24'
      }
    new_element:
      type: object
      properties:
        message: 
          type: string
          description:  Successfull message
        releaseId: 
          description: ID of the new element created
          type: string
      example: {
        "message": "Release created successfully",
        "releaseId": "647935f2f60d5a38977955ab"
      }
    error:
      type: string
      enum: ["Bad request performed by the client due to invalid parameters", 
              "The specified resource was not found"]
      example: "Bad request performed by the client due to invalid parameters"
    limit: 
      type: integer
      description: Limit of results
    gender: 
      type: string
      enum: ["male", "female"]
      description: Gender to filter